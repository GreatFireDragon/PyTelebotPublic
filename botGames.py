import commands as cm
import random
import requests
import threading
from telebot import types
import menuBot

# -----------------------------------------------------------------------
# –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ –±—ã –¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–ª–∞—Å—Å, –æ–±–æ–π–¥—ë–º—Å—è –±–µ–∑ –Ω–µ–≥–æ - –ø–æ–¥—É–º–∞–π—Ç–µ, –ø–æ—á–µ–º—É –∏ –∫–∞–∫
global activeGames
activeGames = {}  # –¢—É—Ç –±—É–¥–µ–º –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞


def newGame(chatID, newGame):
    activeGames.update({chatID: newGame})
    return newGame


def getGame(chatID):
    return activeGames.get(chatID)


def stopGame(chatID):
    activeGames.pop(chatID)


# -----------------------------------------------------------------------
with open("wordle.txt") as file:
    word_list = [row.strip() for row in file]
# -----------------------------------------------------------------------

class RSP_game:
    def __init__(self):
        self.rules = {
        cm.dict["rock"] : 0,
        cm.dict["paper"] : 1,
        cm.dict["scissors"] : 2,
             }

    def get_rules(self, user_hand):
        bot_hand = random.randint(0, 2)
        user_hand = int(self.rules[user_hand])
        diff = user_hand - bot_hand
        # print(str(user_hand) + " - " + str(bot_hand) + "\n" + str(diff))

        if diff == 1 or diff == -2:
            ans = "–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üòÄ"
        elif diff == 0:
            ans = "–Ω–∏—á—å—è üòô"
        else:
            ans = "–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üôÅ"
        bot_hand = self.get_key(self.rules, bot_hand)

        return bot_hand, ans

    def get_key(self, d, value):
        for k, v in d.items():
            if v == value:
                return k

# -----------------------------------------------------------------------
class Wordle:
    def __init__(self, answer=random.choice(word_list).upper()):
        self.answer = answer.upper()
        self.SQUARES = {
            'correct_place': 'üü©',
            'correct_letter': 'üü®',
            'incorrect_letter': '‚¨õ'
        }
        self.guess_number = 6
        self.end_of_game = False
        self.already_guessed = []
        self.wordle_pattern = []
        self.guessed_and_patten = []

    def check_guess(self, guess):
        answer = self.answer
        wordle_pattern = []
        guess = guess.upper()
        # print('player\'s guess: ' + guess)
        guessed = []

        if guess in self.already_guessed:
            ans = "–¢—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª —ç—Ç–æ —Å–ª–æ–≤–æ!"
            return ans
        elif len(guess) != 5:
            ans = '–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ –∏–∑ 5—Ç–∏ –±—É–∫–≤!'
            return ans
        elif not guess.lower() in word_list:
            ans = '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞!'
            return ans

        self.already_guessed.append(guess)

        for i, letter in enumerate(guess):
            guessed.append(letter)
            if answer[i] == guess[i]:
                wordle_pattern.append(self.SQUARES['correct_place'])
            elif letter in answer:
                wordle_pattern.append(self.SQUARES['correct_letter'])
            else:
                wordle_pattern.append(self.SQUARES['incorrect_letter'])

        if guess == self.answer:
            ans = "–í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ!"
            self.end_of_game = True
            return ans

        if len(self.already_guessed) == self.guess_number and guess != self.answer:
            ans = f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n–°–ª–æ–≤–æ –±—ã–ª–æ {self.answer}"
            self.end_of_game = True
            return ans

        pattern = ''.join(wordle_pattern)
        self.wordle_pattern.append(pattern)
        guess = '     '.join(guessed)
        ans = f"{guess}\n{pattern}"
        self.guessed_and_patten.append(ans)
        # print(self.wordle_pattern, self.already_guessed, self.guessed_and_patten, sep="\n")
        return ans

    def full_pattern(self):
        ans = '\n'.join(self.guessed_and_patten)
        if self.guessed_and_patten == []:
            return "–í—ã –µ—â—ë –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞"
        return ans




# -----------------------------------------------------------------------
class Card:
    emo_SPADES = "U0002660"  # Unicod —ç–º–æ–¥–∂–∏ –ü–∏–∫–∏
    emo_CLUBS = "U0002663"  # Unicod —ç–º–æ–¥–∂–∏ –ö—Ä–µ—Å—Ç–∏
    emo_HEARTS = "U0002665"  # Unicod —ç–º–æ–¥–∂–∏ –ß–µ—Ä–≤–∏
    emo_DIAMONDS = "U0002666"  # Unicod —ç–º–æ–¥–∂–∏ –ë—É–±–∏

    def __init__(self, card):
        if isinstance(card, dict):  # –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å–ª–æ–≤–∞—Ä—å
            self.__card_JSON = card
            self.code = card["code"]
            self.suit = card["suit"]
            self.value = card["value"]
            self.cost = self.get_cost_card()
            self.color = self.get_color_card()
            self.__imagesPNG_URL = card["images"]["png"]
            self.__imagesSVG_URL = card["images"]["svg"]

        elif isinstance(card, str):  # –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Ç—Ä–æ–∫–æ–π, –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2S"
            self.__card_JSON = None
            self.code = card

            value = card[0]
            if value == "0":
                self.value = "10"
            elif value == "J":
                self.value = "JACK"
            elif value == "Q":
                self.value = "QUEEN"
            elif value == "K":
                self.value = "KING"
            elif value == "A":
                self.value = "ACE"
            elif value == "X":
                self.value = "JOKER"
            else:
                self.value = value

            suit = card[1]
            if suit == "1":
                self.suit = ""
                self.color = "BLACK"

            elif suit == "2":
                self.suit = ""
                self.color = "RED"

            else:
                if suit == "S":
                    self.suit = "SPADES"  # –ü–∏–∫–∏
                elif suit == "C":
                    self.suit = "CLUBS"  # –ö—Ä–µ—Å—Ç–∏
                elif suit == "H":
                    self.suit = "HEARTS"  # –ß–µ—Ä–≤–∏
                elif suit == "D":
                    self.suit = "DIAMONDS"  # –ë—É–±–∏

                self.cost = self.get_cost_card()
                self.color = self.get_color_card()

    def get_cost_card(self):
        if self.value == "JACK":
            return 2
        elif self.value == "QUEEN":
            return 3
        elif self.value == "KING":
            return 4
        elif self.value == "ACE":
            return 11
        elif self.value == "JOKER":
            return 1
        else:
            return int(self.value)

    def get_color_card(self):
        if self.suit == "SPADES":  # –ü–∏–∫–∏
            return "BLACK"
        elif self.suit == "CLUBS":  # –ö—Ä–µ—Å—Ç–∏
            return "BLACK"
        elif self.suit == "HEARTS":  # –ß–µ—Ä–≤–∏
            return "RED"
        elif self.suit == "DIAMONDS":  # –ë—É–±–∏
            return "RED"


# -----------------------------------------------------------------------
class Game21:
    def __init__(self, deck_count=1, jokers_enabled=False):
        new_pack = self.new_pack(deck_count, jokers_enabled)  # –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–∞—á–∫—É –∏–∑ deck_count-–∫–æ–ª–æ–¥
        if new_pack is not None:
            self.pack_card = new_pack  # —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ª–æ–¥–∞
            self.remaining = new_pack["remaining"],  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ
            self.card_in_game = []  # –∫–∞—Ä—Ç—ã –≤ –∏–≥—Ä–µ
            self.arr_cards_URL = []  # URL –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
            self.score = 0  # –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞
            self.status = None  # —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã, True - –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª, False - –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª, None - –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è

    # ---------------------------------------------------------------------
    def new_pack(self, deck_count, jokers_enabled=False):
        txtJoker = "&jokers_enabled=true" if jokers_enabled else ""
        response = requests.get(f"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count={deck_count}"+txtJoker)
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ø–∫–∏ –∫–∞—Ä—Ç –∏–∑ "deck_count" –∫–æ–ª–æ–¥ –ø–æ 52 –∫–∞—Ä—Ç—ã
        if response.status_code != 200:
            return None
        pack_card = response.json()
        return pack_card

    # ---------------------------------------------------------------------
    def get_cards(self, card_count=1):
        if self.pack_card == None:
            return None
        if self.status != None:  # –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
            return None

        deck_id = self.pack_card["deck_id"]
        response = requests.get(f"https://deckofcardsapi.com/api/deck/{deck_id}/draw/?count={card_count}")
        # –¥–æ—Å—Ç–∞—Ç—å –∏–∑ deck_id-–∫–æ–ª–æ–¥—ã card_count-–∫–∞—Ä—Ç
        if response.status_code != 200:
            return False

        new_cards = response.json()
        if new_cards["success"] != True:
            return False
        self.remaining = new_cards["remaining"]  # –æ–±–Ω–æ–≤–∏–º –≤ –∫–ª–∞—Å—Å–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ

        arr_newCards = []
        for card in new_cards["cards"]:
            card_obj = Card(card)  # —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–ª–∞—Å—Å–∞ Card –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç —É –∏–≥—Ä–æ–∫–∞
            arr_newCards.append(card_obj)
            self.card_in_game.append(card_obj)
            self.score = self.score + card_obj.cost
            self.arr_cards_URL.append(card["image"])

        if self.score > 21:
            self.status = False
            text_game = "–û—á–∫–æ–≤: " + str(self.score) + " –í–´ –ü–†–û–ò–ì–†–ê–õ–ò!"

        elif self.score == 21:
            self.status = True
            text_game = "–í–´ –í–´–ò–ì–†–ê–õ–ò!"
        else:
            self.status = None
            text_game = "–û—á–∫–æ–≤: " + str(self.score) + " –≤ –∫–æ–ª–æ–¥–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç: " + str(self.remaining)

        return text_game


# -----------------------------------------------------------------------
class Wordle_Multiplayer:
    game_duration = 20  # —Å–µ–∫.
    text_rules = "–ò–≥—Ä–∞ wordle.\n\n"
    url_picRules = "https://imagesvc.meredithcorp.io/v3/mm/image?url=https%253A%252F%252Fstatic.onecms.io%252Fwp-content%252Fuploads%252Fsites%252F28%252F2017%252F05%252Fblue0517.jpg"
    name = "–ò–≥—Ä–∞ Wordle (Multiplayer)"

    class Player:
        def __init__(self, playerID, playerName):
            self.id = playerID
            self.gameMessage = None
            self.name = playerName
            self.scores = 0

        def __str__(self):
            return self.name

    def __init__(self, bot, chat_user):
        self.id = chat_user.id
        self.gameNumber = 1  # —Å—á—ë—Ç—á–∏–∫ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
        self.objBot = bot
        self.players = {}
        self.gameTimeLeft = 0
        self.objTimer = None
        self.winner = None
        self.lastWinner = None
        self.textGame = "...\n"
        self.addPlayer(chat_user.id, chat_user.userName)
        self.wordle = Wordle()


    def addPlayer(self, playerID, playerName):
        newPlayer = self.Player(playerID, playerName)
        self.players[playerID] = newPlayer
        self.startTimer()  # –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º —Ç–∞–π–º–µ—Ä
        print("---------------\nafter self.startTimer ~312 line\n----------------")
        self.setTextGame()
        gameMessage = self.objBot.send_photo(playerID, photo=self.url_picRules, caption=self.textGame)
        self.players[playerID].gameMessage = gameMessage
        self.sendMessagesAllPlayers([playerID])  # –æ—Ç–ø—Ä–∞–≤–∏–º –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        return newPlayer


    def delPlayer(self, playerID):
        # print("DEL")
        remotePlayer = self.players.pop(playerID)
        try:
            self.objBot.delete_message(chat_id=remotePlayer.id, message_id=remotePlayer.gameMessage.id)
        except:
            pass
        self.objBot.send_message(chat_id=remotePlayer.id, text="–ú–Ω–µ –∂–∞–ª—å, –≤–∞—Å –≤—ã–∫–∏–Ω—É–ª–æ –∏–∑ –∏–≥—Ä—ã!")
        menuBot.goto_menu(self.objBot, remotePlayer.id, cm.dict["games"])
        # self.findWiner()  # –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫ –≤—ã—Ö–æ–¥–∏—Ç, –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
        # if len(self.players.values()) == 1:
        #     stopGame(self.id)

    def getPlayer(self, chat_userID):
        return self.players.get(chat_userID)


    def looper(self):
        if self.gameTimeLeft > 0:
            self.setTextGame()
            self.sendMessagesAllPlayers()
            self.gameTimeLeft -= 1
            self.objTimer = threading.Timer(1, self.looper)
            self.objTimer.start()

            # print(self.objTimer.name, self.gameTimeLeft)
        else:
            delList = []
            for player in self.players.values():
                # if player.choice is None:
                delList.append(player.id)
            for idPlayer in delList:
                self.delPlayer(idPlayer)


    def startTimer(self):
        print("START")
        self.stopTimer()
        self.gameTimeLeft = self.game_duration
        self.looper()

    def stopTimer(self):
        print("STOP")
        self.gameTimeLeft = 0
        if self.objTimer is not None:
            self.objTimer.cancel()
            self.objTimer = None

    def setTextGame(self):
        textGame = self.text_rules
        if self.winner is None:
            textGame += f"<b>–ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {self.gameTimeLeft} —Å–µ–∫—É–Ω–¥</b>\n"
        else:
            textGame += f"–í—ã–∏–≥—Ä–∞–ª: <b>{self.winner}! –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥..."

        self.textGame = textGame

    def sendMessagesAllPlayers(self, excludingPlayers=()):
        print("EDITING MESSAGE")
        try:
            for player in self.players.values():
                if player.id is not None and player.id not in excludingPlayers:
                    # textIndividual = f"\n –ò–≥—Ä–∞—é—Ç: {player.name}!"
                    # self.textGame += textIndividual
                    self.objBot.edit_message_caption(chat_id=player.id, message_id=player.gameMessage.id,
                                                     caption=self.textGame,
                                                     parse_mode='HTML')
        except:
            pass




# -----------------------------------------------------------------------
class GameRPS_Multiplayer:
    game_duration = 10  # —Å–µ–∫.
    values = ["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"]
    name = "–ò–≥—Ä–∞ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ (–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä)"
    text_rules = "<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:</b>\n" \
                 "1. –ö–∞–º–µ–Ω—å –ø–æ–±–µ–∂–¥–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã\n" \
                 "2. –ë—É–º–∞–≥–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∫–∞–º–µ–Ω—å\n" \
                 "3. –ù–æ–∂–Ω–∏—Ü—ã –ø–æ–±–µ–∂–¥–∞—é—Ç –±—É–º–∞–≥—É\n" \
                 "–ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ: <a href='https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D0%BC%D0%B5%D0%BD%D1%8C,_%D0%BD%D0%BE%D0%B6%D0%BD%D0%B8%D1%86%D1%8B,_%D0%B1%D1%83%D0%BC%D0%B0%D0%B3%D0%B0'>Wikipedia</a>"
    url_picRules = "https://i.ytimg.com/vi/Gvks8_WLiw0/maxresdefault.jpg"

    class Player:

        def __init__(self, playerID, playerName):
            self.id = playerID
            self.gameMessage = None
            self.name = playerName
            self.scores = 0
            self.choice = None
            self.lastChoice = ""

        def __str__(self):
            return self.name

    def __init__(self, bot, chat_user):
        self.id = chat_user.id
        self.gameNumber = 1  # —Å—á—ë—Ç—á–∏–∫ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
        self.objBot = bot
        self.players = {}
        self.gameTimeLeft = 0
        self.objTimer = None
        self.winner = None
        self.lastWinner = None
        self.textGame = ""
        self.addPlayer(None, "–ö–æ–º–ø—å—é—Ç–µ—Ä")
        self.addPlayer(chat_user.id, chat_user.userName)

    def addPlayer(self, playerID, playerName):
        newPlayer = self.Player(playerID, playerName)
        self.players[playerID] = newPlayer
        if playerID is not None:  # None - —ç—Ç–æ –∫–æ–º–ø—å—é—Ç–µ—Ä
            self.startTimer()  # –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º —Ç–∞–π–º–µ—Ä
            self.setTextGame()
            # —Å–æ–∑–¥–∞–¥–∏–º –≤ —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            url_picRules = self.url_picRules
            keyboard = types.InlineKeyboardMarkup()
            list_btn = []
            for keyName in self.values:
                list_btn.append(types.InlineKeyboardButton(text=keyName, callback_data="GameRPSm|Choice-" + keyName + "|" + menuBot.Menu.setExtPar(self)))
            keyboard.add(*list_btn)
            list_btn = types.InlineKeyboardButton(text="–í—ã—Ö–æ–¥", callback_data="GameRPSm|Exit|" + menuBot.Menu.setExtPar(self))
            keyboard.add(list_btn)
            gameMessage = self.objBot.send_photo(playerID, photo=url_picRules, caption=self.textGame, parse_mode='HTML', reply_markup=keyboard)
            self.players[playerID].gameMessage = gameMessage
        else:
            newPlayer.choice = self.__class__.getRandomChoice()
        self.sendMessagesAllPlayers([playerID])  # –æ—Ç–ø—Ä–∞–≤–∏–º –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        return newPlayer




    def delPlayer(self, playerID):
        # print("DEL")
        remotePlayer = self.players.pop(playerID)
        try:
            self.objBot.delete_message(chat_id=remotePlayer.id, message_id=remotePlayer.gameMessage.id)
        except:
            pass
        self.objBot.send_message(chat_id=remotePlayer.id, text="–ú–Ω–µ –∂–∞–ª—å, –≤–∞—Å –≤—ã–∫–∏–Ω—É–ª–æ –∏–∑ –∏–≥—Ä—ã!")
        menuBot.goto_menu(self.objBot, remotePlayer.id, cm.dict["games"])
        self.findWiner()  # –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫ –≤—ã—Ö–æ–¥–∏—Ç, –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
        if len(self.players.values()) == 1:
            stopGame(self.id)

    def getPlayer(self, chat_userID):
        return self.players.get(chat_userID)

    def newGame(self):
        self.gameNumber += 1
        self.lastWinner = self.winner
        self.winner = None
        for player in self.players.values():
            player.lastChoice = player.choice
            if player.id == None:  # —ç—Ç–æ –∫–æ–º–ø—å—é—Ç–µ—Ä
                player.choice = self.__class__.getRandomChoice()
            else:
                player.choice = None
        self.startTimer()  # –∑–∞–ø—É—Å—Ç–∏–º —Ç–∞–π–º–µ—Ä –∏–≥—Ä—ã (–µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, —Å–±—Ä–æ—Å–∏–º –µ–≥–æ)

    def looper(self):
        # print("LOOP", self.objTimer)
        if self.gameTimeLeft > 0:
            self.setTextGame()
            self.sendMessagesAllPlayers()
            self.gameTimeLeft -= 1
            self.objTimer = threading.Timer(1, self.looper)
            self.objTimer.start()
            print(self.objTimer.name, self.gameTimeLeft)
        else:
            delList = []
            for player in self.players.values():
                if player.choice is None:
                    delList.append(player.id)
            for idPlayer in delList:
                self.delPlayer(idPlayer)

    def startTimer(self):
        # print("START")
        self.stopTimer()
        self.gameTimeLeft = self.game_duration
        self.looper()


    def stopTimer(self):
        # print("STOP")
        self.gameTimeLeft = 0
        if self.objTimer is not None:
            self.objTimer.cancel()
            self.objTimer = None

    @classmethod
    def getRandomChoice(cls):
        import random
        # lenValues = len(cls.values)
        # rndInd = random.randint(0, lenValues-1)
        # return cls.values[rndInd]
        return random.choice(cls.values)

    def checkEndGame(self):
        isEndGame = True
        for player in self.players.values():
            isEndGame = isEndGame and player.choice != None
        return isEndGame

    def playerChoice(self, chat_userID, —Åhoice):
        player = self.getPlayer(chat_userID)
        player.choice = —Åhoice
        self.findWiner()
        self.sendMessagesAllPlayers()

    def findWiner(self):
        if self.checkEndGame():
            self.stopTimer()  # –≤—Å–µ —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥, —Ç–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–∞–µ–º
            playersChoice = []
            for player in self.players.values():
                playersChoice.append(player.choice)
            choices = dict(zip(playersChoice, [playersChoice.count(i) for i in playersChoice]))
            if len(choices) == 1 or len(choices) == len(self.__class__.values):
                # –µ—Å–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–ª–∏ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã - —ç—Ç–æ –Ω–∏—á—å—è
                self.winner = "–ù–∏—á—å—è"
            else:
                # –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤—Å–µ–≥–æ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –Ω–∞–¥–æ –ø–æ–Ω—è—Ç—å –µ—Å—Ç—å –ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–Ω –∏ –±—å—ë—Ç –ª–∏ –æ–Ω –¥—Ä—É–≥–∏—Ö
                choice1, quantity1 = choices.popitem()
                choice2, quantity2 = choices.popitem()

                code = choice1[0] + choice2[0]
                if quantity1 == 1 and code == "–ö–ù" or code == "–ë–ö" or code == "–ù–ë":
                    choiceWiner = choice1
                elif quantity2 == 1 and code == "–ù–ö" or code == "–ö–ë" or code == "–ë–ù":
                    choiceWiner = choice2
                else:
                    choiceWiner = None

                if choiceWiner != None:
                    winner = ""
                    for player in self.players.values():
                        if player.choice == choiceWiner:
                            winner = player
                            winner.scores += 1
                            break
                    self.winner = winner

                else:
                    self.winner = "–ù–∏—á—å—è"
        self.setTextGame()

        if self.checkEndGame() and len(self.players) > 1:  # –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            self.objTimer = threading.Timer(3, self.newGame)
            self.objTimer.start()


    def setTextGame(self):
        from prettytable import PrettyTable
        mytable = PrettyTable()
        mytable.field_names = ["–ò–≥—Ä–æ–∫", "–°—á—ë—Ç", "–í—ã–±–æ—Ä", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]  # –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π —Ç–∞–±–ª–∏—Ü—ã
        for player in self.players.values():
            mytable.add_row([player.name, player.scores, player.lastChoice, "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å!" if self.lastWinner == player else ""])

        textGame = self.text_rules + "\n\n"
        textGame += "<code>" + mytable.get_string() + "</code>" + "\n\n"

        if self.winner is None:
            textGame += f"–ò–¥—ë—Ç –∏–≥—Ä–∞... <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞: {self.gameTimeLeft}</b>\n"
        elif self.winner == "–ù–∏—á—å—è":
            textGame += f"<b>–ù–∏—á—å—è!</b> –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã..."
        else:
            textGame += f"–í—ã–∏–≥—Ä–∞–ª: <b>{self.winner}! –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã..."

        self.textGame = textGame

    def sendMessagesAllPlayers(self, excludingPlayers=()):
        try:
            for player in self.players.values():
                if player.id is not None and player.id not in excludingPlayers:
                    textIndividual = f"\n –í–∞—à –≤—ã–±–æ—Ä: {player.choice}, –∂–¥—ë–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö!" if player.choice is not None else "\n"
                    self.objBot.edit_message_caption(chat_id=player.id, message_id=player.gameMessage.id, caption=self.textGame + textIndividual, parse_mode='HTML',
                                                     reply_markup=player.gameMessage.reply_markup)
        except:
            pass

